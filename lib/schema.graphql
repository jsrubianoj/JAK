type User{
    _id: ID
    firstName: String!
    lastName: String!
    role: String!
    email: String!
    status: String!
}

type Project{
    _id: ID!
    title: String!
    description: String!
    status: String!
}

type Request{
    _id: ID!
    title: String!
    description: String!
    status: String!
}

type Query {
    "Devuelve todos los Usuarios"
    getUsers: [User]
    "Devuelve todos los proyectos"
    getProjects: [Project]
    "Devuelve un proyecto"
    getProject(id: ID!): Project
    "Devuelve todos los Estudiantes"
    getStudents: [Student]
    "Devuelve todas las solicitudes"
    getRequests: [Request]
}

input UserInput{
    firstName: String!
    lastName: String!
    role: String!
    email: String!
}

input ProjectInput{
    title: String!
    description: String!
    status: String! #CHECK
}

input RequestInput{
    title: String!
    description: String!
    status: String! #CHECK
}

input UserStatus{
    status: String!
}

input UserPersonalInfo{
    firstName: String!
    lastName: String!
    email: String!
}

type Mutation{
    "Crear un usuario"
    createUser(input: UserInput!): User
    "Crear un proyecto"
    createProject(input: ProjectInput!): Project
    "Crear una solicitud"
    createRequest(input: RequestInput!): Request
    "Editar un usuario"
    editUser(_id: ID!, input: UserInput!): User
    "Editar un proyecto"
    editProject(_id: ID!, input: ProjectInput!): Project
    "Editar el estado del usuario"
    editUserStatus(_id: ID!, input: UserStatus!): User
    "Editar informaci√≥n personal de un usuario"
    editUserPersonalInfo(_id: ID!, input: UserPersonalInfo!): User
}